# Generated by Django 2.2 on 2019-04-28 09:09

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Board',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_name', models.TextField()),
                ('min_teams', models.PositiveIntegerField(default=2, validators=[django.core.validators.MinValueValidator(2, message='Games must have at least 2 teams')])),
                ('max_teams', models.PositiveIntegerField(null=True, validators=[django.core.validators.MinValueValidator(2, message='Games must have at least 2 teams')])),
                ('min_players_per_team', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1, message='Games must have at least 1 player per team')])),
                ('max_players_per_team', models.PositiveIntegerField(null=True, validators=[django.core.validators.MinValueValidator(1, message='Games must have at least 1 player per team')])),
                ('mu', models.FloatField(default=25.0)),
                ('sigma', models.FloatField(default=8.333333333333334)),
                ('beta', models.FloatField(default=4.166666666666667)),
                ('tau', models.FloatField(default=0.08333333333333334)),
                ('draw_probability', models.FloatField(default=0.1, validators=[django.core.validators.MaxValueValidator(1, message='Draw probability must be at most 1.0'), django.core.validators.MinValueValidator(0, message='Draw probability must be at least 0.0')])),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(db_index=True)),
                ('dirty', models.BooleanField(default=True)),
                ('board', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='games', to='skillboards.Board')),
            ],
        ),
        migrations.CreateModel(
            name='GameTeam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.PositiveSmallIntegerField()),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teams', to='skillboards.Game')),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PlayerBoardMembership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('board', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_memberships', to='skillboards.Board')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='board_memberships', to='skillboards.Player')),
            ],
        ),
        migrations.CreateModel(
            name='GameTeamPlayer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.FloatField(default=1)),
                ('mu', models.FloatField(default=None, null=True)),
                ('sigma', models.FloatField(default=None, null=True)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='game_links', to='skillboards.Player')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='players', to='skillboards.GameTeam')),
            ],
        ),
        migrations.AddField(
            model_name='board',
            name='players',
            field=models.ManyToManyField(related_name='boards', through='skillboards.PlayerBoardMembership', to='skillboards.Player'),
        ),
        migrations.AddConstraint(
            model_name='playerboardmembership',
            constraint=models.UniqueConstraint(fields=('player', 'board'), name='unique_player_per_board'),
        ),
        migrations.AddConstraint(
            model_name='gameteamplayer',
            constraint=models.CheckConstraint(check=models.Q(('weight__gte', 0), ('weight__lte', 1)), name='weight_unit_interval'),
        ),
        migrations.AddConstraint(
            model_name='gameteamplayer',
            constraint=models.UniqueConstraint(fields=('player', 'team'), name='unique_player_per_team'),
        ),
        migrations.AddConstraint(
            model_name='game',
            constraint=models.UniqueConstraint(fields=('timestamp', 'board'), name='unique_game_per_timestamp'),
        ),
        migrations.AddConstraint(
            model_name='board',
            constraint=models.CheckConstraint(check=models.Q(('draw_probability__gte', 0), ('draw_probability__lte', 1)), name='draw_probability_unit_interval'),
        ),
        migrations.AddConstraint(
            model_name='board',
            constraint=models.CheckConstraint(check=models.Q(('max_players_per_team__gte', 1), ('max_teams__gte', 2), ('min_players_per_team__gte', 1), ('min_teams__gte', 2)), name='team_player_counts'),
        ),
    ]
